package old

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"net/url"
	"bytes"
	"github.com/zmb3/spotify/v2"
)

const (
	clientID 			= "598654e5de9140c4897b8ad235595cc5"
	clientSecret 	= "8f16007838a742dc878ddf6678c017d8"
	playlistID 		= "1G9sc90TdXmgtP3aQfR7UD"
)

var accessToken string

func SetToken () {

	localToken, err := getSpotifyToken()
	if err != nil {
		fmt.Println("Error getting access token")
		return
	}

	accessToken = localToken

}

type TokenResponse struct {
	AccessToken string `json:"access_token"`
	TokenType   string `json:"token_type"`
	ExpiresIn   int    `json:"expires_in"`
}

type TrackInfo struct {
	URI  string `json:"uri"`
	Name string `json:"name"`
}

type SearchResult struct {
	Tracks struct {
		Items []TrackInfo `json:"items"`
	} `json:"tracks"`
}

type PlaylistTracksResponse struct {
	Items []struct {
		Track struct {
			URI string `json:"uri"`
		} `json:"track"`
	} `json:"items"`
}

type AddTracksRequest struct {
	URIs []string `json:"uris"`
}

func getSpotifyToken() (string, error) {
	url := "https://accounts.spotify.com/api/token"
	method := "POST"

	clientCredentials := base64.StdEncoding.EncodeToString([]byte(clientID + ":" + clientSecret))

	payload := strings.NewReader("grant_type=client_credentials")
	req, err := http.NewRequest(method, url, payload)
	if err != nil {
		return "", err
	}

	req.Header.Add("Authorization", "Basic "+clientCredentials)
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

	res, err := http.DefaultClient.Do(req)
	if err != nil {
		return "", err
	}
	defer res.Body.Close()

	body, err := io.ReadAll(res.Body)
	if err != nil {
		return "", err
	}

	var tokenResponse TokenResponse
	err = json.Unmarshal(body, &tokenResponse)
	if err != nil {
		return "", err
	}

	return tokenResponse.AccessToken, nil
}

func processSongs (songs [][]string) {

	var listOfTracks []string

	for _, item := range songs {
		song := item[0]
		artist := item[1]
		fmt.Println(item)
		trackUri, err := FindTrackURI(song, artist)
		if err != nil {
			fmt.Println("Error processing song ", song, " - ", artist)
			continue
		}
		
		listOfTracks = append(listOfTracks, trackUri)
	}

	err := AddNewTracksToPlaylist(listOfTracks)
	if err != nil {
		fmt.Println("Error adding the tracks - ", err)
		return
	}
	
}

func FindTrackURI(songName, artistName string) (string, error) {
	baseURL := "https://api.spotify.com/v1/search"
	query := url.QueryEscape("track:" + songName + " artist:" + artistName)
	fullURL := fmt.Sprintf("%s?q=%s&type=track", baseURL, query)

	req, err := http.NewRequest("GET", fullURL, nil)
	if err != nil {
		return "", err
	}

	req.Header.Set("Authorization", "Bearer "+accessToken)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	var searchResult SearchResult
	err = json.Unmarshal(body, &searchResult)
	if err != nil {
		return "", err
	}

	if len(searchResult.Tracks.Items) > 0 {
		return searchResult.Tracks.Items[0].URI, nil
	}

	return "", fmt.Errorf("no track found for the given song and artist name")
}

func AddNewTracksToPlaylist(tracks []string) error {
	fmt.Println("TESTES")
	// Define the endpoint with the playlist ID
	endpoint := fmt.Sprintf("https://api.spotify.com/v1/playlists/%s/tracks", playlistID)

	// Create the request body with the track URIs
	data := map[string][]string{"uris": tracks}
	body, err := json.Marshal(data)
	if err != nil {
		return fmt.Errorf("Error marshalling tracks data: %v", err)
	}

	// Create the HTTP request
	req, err := http.NewRequest("POST", endpoint, bytes.NewBuffer(body))
	if err != nil {
		return fmt.Errorf("Error creating request: %v", err)
	}

	// Add the necessary headers
	req.Header.Set("Authorization", "Bearer "+accessToken)
	req.Header.Set("Content-Type", "application/json")

	// Perform the HTTP request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("Error sending request to Spotify API: %v", err)
	}
	defer resp.Body.Close()

	// Check the response status code
	if resp.StatusCode != http.StatusCreated && resp.StatusCode != http.StatusOK {
		return fmt.Errorf("Spotify API returned non-success status code: %d", resp.StatusCode)
	} 

	fmt.Println("LETS GOOO")
	fmt.Println(resp)

	// Optionally, handle the response body or other aspects of the response if necessary
	// ...

	return nil
}
